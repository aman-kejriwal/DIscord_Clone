// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id         String   @id @default(uuid())
  userId     String   @unique
  name       String
  imageUrl   String   @db.Text
  email      String   @db.Text
  servers    Server[]
  members    Member[]
  channels Channel[]
  createdAt  DateTime @default(now())
  updateddAt DateTime @updatedAt
}

model Server {
  id         String   @id @default(uuid())
  name       String
  imageUrl   String   @db.Text
  inviteCode String   @unique
  createdAt  DateTime @default(now())
  updateddAt DateTime @updatedAt
  profileId  String
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members Member[]
  channels Channel[]
  @@index([profileId])

}
enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId  String
  server Server @relation(fields: [serverId],references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  updateddAt DateTime @updatedAt

  messages Message[]
  directMessages DirectMessage[]
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")
  @@index([profileId])
  @@index([serverId])

}

enum ChannelType{
  TEXT
  AUDIO
  VIDEO
}
model Channel{
  id         String   @id @default(uuid())
  name String
  type ChannelType @default(TEXT)
  profileId String
  profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId],references: [id],onDelete: Cascade)

  createdAt  DateTime @default(now())
  updateddAt DateTime @updatedAt
  messages Message[]

  @@index([serverId])
  @@index([profileId])
}

model Message{
  id         String   @id @default(uuid())
  content String

  fileUrl String
  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)
  channelId String
  channel Channel @relation(fields: [channelId],references: [id],onDelete: Cascade)
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([memberId])
  @@index([channelId])
}
model Conversation{
  id         String   @id @default(uuid())

  memberOneId String
  MemberOne Member @relation("MemberOne",fields: [memberOneId] ,references: [id],onDelete: Cascade)

  memberTwoId String
  MemberTwo Member @relation("MemberTwo",fields: [memberTwoId] ,references: [id],onDelete: Cascade)

  directMessages DirectMessage[]
  @@index([memberOneId])
  @@index([memberTwoId])

  @@unique([memberOneId,memberTwoId])
}
model DirectMessage{
  id         String   @id @default(uuid())
  content String
  fileUrl String

  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)

  conversationId String 
  conversation Conversation @relation(fields: [conversationId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  deleted Boolean @default(false)
  @@index([memberId])
  @@index([conversationId])
  
}